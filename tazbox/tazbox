#!/bin/sh
#
# SliTaz tiny GUI boxes for the desktop (su, logout, locale, etc)
# and as usual, please: KISS
#
# Copyright (C) 2011-2014 SliTaz GNU/Linux - GNU GPL v3
#    - Christophe Lincoln <pankso@slitaz.org>
#    - Aleksej Bobylev <al.bobylev@gmail.com>
#
. /lib/libtaz.sh
export TEXTDOMAIN='tazbox' # i18n

# download dir (may be in a config file)
DOWNLOADS=$HOME/Downloads

# some constants to be used inside functions
tmp=/tmp/keymap.list
db=/usr/share/i18n/locales
zi=/usr/share/zoneinfo/
ztab=${zi}zone-mini.tab
csv=/tmp/freegeoip.csv

#
# Functions
#

usage() {
	newline; _ 'SliTaz tiny GUI boxes for the desktop'

	newline; boldify $(_ 'Usage:')
	echo "  $(basename $0) [$(_n 'command')]"

	newline; boldify $(_ 'Commands:')
	optlist "\
usage		$(_ 'Display this short help usage')
su			$(_ 'Execute a command as super-user')
logout		$(_ 'Desktop logout box with actions')
out			$(_ 'Pipe a command output into a GTK window')
out-dl		$(_ 'Pipe wget output into a GTK window')
locale		$(_ 'Configure system language (root)')
keymap		$(_ 'Configure system keymap (root)')
tz			$(_ 'Configure system timezone (root)')
setup		$(_ 'System initial setup (locale, keymap & timezone)')
new-file	$(_ 'Create a new file or folder on the desktop')
all-apps	$(_ 'Display icons of all installed applications')
notify		$(_ 'Notify user with a desktop centered box')
tazapps		$(_ 'Configure SliTaz default applications')"
	newline
}

# try to find icon in .desktop files
find_icon() {
	local desktop
	desktop=$(find $HOME/.local/share/applications /usr/share/applications \
		-name ${1##*/}.desktop 2&>/dev/null | head -n1)
	[ x$desktop != x ] && cat $desktop | sed '/\[Desktop\ Entry\]/,/^\[/!d' | \
		sed '/^Icon=/!d' | head -n1 | cut -d= -f2
}

# su frontend GUIs
su_main() {
	CMD1="$1"; shift; CMD2="$(echo $@ | sed 's|&|&amp;|g')"
	: ${icon=$(find_icon $CMD1)}
	[ x$icon == x ] && icon=gtk-dialog-authentication

	yad --title="$(_n 'SliTaz admin password')" --window-icon=$icon \
		--width=520 --on-top --center \
		--image=$icon --image-on-top \
		--text="$(_n 'Please enter root password (default root) to execute:')\n
<span foreground=\"red\"><tt><b>$CMD1</b> $CMD2</tt></span>\n" \
		--form \
		--field="$(_n 'Password:'):H" $PASSWD \
		--field="$(_n 'Autosave password'):CHK" $CHECKED
}

su_error() {
	icon=gtk-dialog-error
	yad --title="$(_n 'Error')" --window-icon=$icon \
		--width=320 --on-top --center \
		--image=$icon --image-on-top \
		--text="\n<b>$(_n 'Error: wrong password!')</b>\n" \
		--button="gtk-close:1"
}

# user may press cancel on download.
cancel_dl() {
	if [ "$?" == 1 ]; then
		_ "CANCEL"
		rm -f $DOWNLOADS/$(basename $url)
	fi
}

# output a command in a GTK window
output_command() {
	: ${title=$(_n 'TazBox Output')}
	: ${icon=gtk-dialog-info}

	yad --title="$title" --window-icon=$icon \
		--geometry="600x220+0-24" --fore="#ffffff" --back="#000000" \
		--text-info --fontname=monospace --wrap $opts \
		--button="gtk-close:1"
}

# logout GUI function
logout_main() {
	icon=/usr/share/pixmaps/slitaz-icon.png
	yad --title="$(_n 'SliTaz Logout')" --window-icon=$icon \
		--on-top --center --height=130 \
		--image=$icon --image-on-top \
		--text="<b>$(_n 'SliTaz Logout - Please choose an action:')</b>" \
		--always-print-result \
		--button "$(_n 'Close X session')!system-log-out:4" \
		--button "$(_n 'Reboot system')!reload:3" \
		--button "$(_n 'Shutdown system')!system-shutdown:2"
}

# generate keymap list
gen_kmap_list() {
	echo > $tmp
	cd /usr/share/kbd/keymaps/i386
	# we first need a list to sort and then use \n for Yad list.
	for i in $(find -type f | sed '/include/d; s|./||'); do
		echo "$(basename $i .map.gz)|$(dirname $i)" >> $tmp
	done
}

# Initial Config functions
setup_main() {
	icon=locale
	gen_kmap_list
	locale=$(ls -1 $db | grep ^[a-z][a-z]_[A-Z][A-Z] | tr "\n" "!")
	keymap=$(cat $tmp | sort | tr "\n" "!")
	timezone=$(find $zi -type f | sed s,$zi,,g | grep -v -F '.tab' | tr "\n" "!")
	yad --title="$(_n 'SliTaz Initial Setup')" --window-icon=$icon \
		--width=500 \
		--image=$icon --image-on-top \
		--text="<big>$(_n 'Here you can set your preferences \n for <b>locale, keymap and timezone</b>.')</big>" \
		--form \
		--field "$(_n 'Locale'):CB" $locale \
		--field "$(_n 'Keymap'):CB" $keymap \
		--field "$(_n 'Timezone'):CB" $timezone
}

setup() {
	choices=$(setup_main)
	locale=$(echo $choices | cut -d"|" -f1)
	keymap=$(echo $choices | cut -d"|" -f2)
	timezone=$(echo $choices | cut -d"|" -f3)
	[ $locale ] && tazlocale init $locale
	[ $keymap ] && tazkeymap init $keymap
	[ $timezone ] && echo $timezone > /etc/TZ
}


#
# Locale functions
#

locale_main() {
	icon=preferences-desktop-locale
	for locale in $(ls -1 $db | grep '[a-z]_[A-Z]'); do
		desc=$(fgrep -m1 title $db/$locale | cut -d'"' -f2)
		ll_CC=${locale%%@*}
		echo -e "${ll_CC##*_}\n$locale\n$desc"
	done | \
	yad --title="$(_n 'SliTaz locale')" --window-icon=$icon \
		--width=600 --height=380 --sticky --on-top --center \
		--image=$icon --image-on-top \
		--text="<b>$(_n 'Language configuration')</b> \
\n\n$(_ 'Tip: manage locales list by installing/removing locale packages.')" \
		--list --column="$(_n 'Flag'):IMG" --column $(_n 'Name') \
		--column $(_n 'Description') \
		--print-column=2 --separator='' \
		--button="$(_n 'Manage')!stock_properties:2" \
		--button="gtk-cancel:1" --button="gtk-ok:0"
}

locale() {
	locale=$(locale_main)
	# Deal with --button values
	case $? in
		2) tazbox manage_i18n main ;;
		1) exit 0 ;;
		*) continue ;;
	esac
	# System language configuration.
	if [ "$locale" ]; then
		tazlocale $locale
		tazbox notify "$(_ 'Locale was set to $locale')" \
			preferences-desktop-locale 3
	fi
}

# Keymap functions
keymap_main() {
	#icon=preferences-desktop-keyboard
	icon=input-keyboard
	gen_kmap_list
	for i in $(sort $tmp); do
		echo "$i" | tr '|' '\n'
	done | \
	yad --title="$(_ 'SliTaz keymap')" --window-icon=$icon \
		--width=500 --height=380 --sticky --on-top --center \
		--image=$icon --image-on-top \
		--text="<b>$(_n 'Keyboard configuration')</b>" \
		--list --column $(_n 'Keymap') --column $(_n 'Type') \
		--print-column=1 --separator=''
	rm -f $tmp
}

keymap() {
	keymap=$(keymap_main)
	# Deal with --button values
	[ x$? == x1 ] && exit 0
	# System keymap configuration
	[ "$keymap" ] && tazkeymap $keymap
}

# Free GeoIP service
# Response: "IP","CountryCode","CountryName", ...
geoip() {
	[ ! -e $csv ] && wget -q -T3 -O $csv http://freegeoip.net/csv/ 2&>/dev/null
	[ -e $csv ] && cut -d'"' -f4 $csv
}

#
# TZ functions
#

# list of all existing available locations for country
tz_list() {
	find $zi | \
		grep -E "$(cat $ztab | grep "^$1	" | cut -d'	' -f2 | tr ' ' '|')" | \
		grep -v -E "posix|right" | \
		sed 's|.*/||g' | sort
}

# ask for confirmation only if we have what to choose
tz_suggest() {
	CountryCode=$(geoip)
	if [ "x$CountryCode" != x ]; then
		if [ "x$(tz_list $CountryCode)" != x ]; then
			CountryName=$(cut -d'"' -f6 $csv)
			yad --title="$(_ 'SliTaz TZ')" --window-icon=$icon \
			--on-top --center \
			--image=$CountryCode --image-on-top \
			--text="$(_ 'Suggested location:') <b>$CountryName</b>\n
$(_ 'Are you agreed?')" \
			--button="gtk-yes:0" --button="gtk-no:1"
			[ $? == 0 ] && echo $CountryCode
		fi
	fi
}

tz_select() {
	case x$1 in
	x)
		# first pass - country
		tmpcc=$(mktemp)

		for tzfile in $(find $zi -type f -regex '.*info/[ABCEIMP].*'); do
			grep -m1 $(basename $tzfile) $ztab
		done | cut -d'	' -f1 | sort -u > $tmpcc

		for CC in $(cat $tmpcc); do
			cat << EOT
$CC
$CC
$(grep -m1 "$CC	" ${zi}iso3166.tab | cut -d'	' -f2)
EOT
		done | \
		yad --title="$(_ 'SliTaz TZ')" --window-icon=$icon \
			--width=500 --height=380 --on-top --center \
			--image=$icon --image-on-top \
			--text="<b>$(_ 'TimeZone Configuration')</b> \
\n$(_ 'Select country and press "Forward" or manually select timezone file.') \
\n\n$(_ 'Tip: manage timezones list by installing/removing locale packages.')" \
			--list \
			--column="$(_n 'Flag'):IMG" --column=$(_n 'Code') --column=$(_n 'Country') \
			--button="$(_n 'Manage')!stock_properties:4" \
			--button="$(_n 'Manual')!gtk-index:2" \
			--button="gtk-go-forward:0" \
			--button="gtk-cancel:1" --always-print-result \
			--print-column=2 --separator=''
		;;
	xindex)
		# manual selection of file with timezone info
		yad --title="$(_ 'SliTaz TZ')" --window-icon=$icon \
			--width=500 --on-top --center \
			--image=$icon --image-on-top \
			--text="<b>$(_ 'TimeZone Configuration')</b>\n$(_ 'Select time zone')" \
			--form --field=":FL" ${zi}UTC --separator='' | \
			sed "s|$zi||"
		;;
	*)
		# second pass - city/place
		list=$(tz_list $1)
		icon=$1
		if [ $(echo "$list" | wc -l) != 1 ]; then
			echo "$list" | \
			yad --title="$(_ 'SliTaz TZ')" --window-icon=$icon \
				--width=500 --height=380 --on-top --center \
				--image=$icon --image-on-top \
				--text="<b>$(_ 'TimeZone Configuration')</b>\n$(_ 'Select location')" \
				--list --column $(_n 'Location/City') --separator=''
		else
			echo $list
		fi
		;;
	esac
}

tz() {
	icon=clock
	arg=$(tz_suggest)

	timezone=$(tz_select $arg)
	case $? in
		1) exit 0 ;;
		0) [ x$arg == x ] && timezone=$(tz_select "$timezone")
			[ x$timezone == x ] && exit 0
			timezone=$(find $zi -name $timezone | grep -v -E "posix|right" | \
				sed "s|$zi||") ;;
		2) timezone=$(tz_select "index") ;;
		4) tazbox manage_i18n main;;
	esac

	[ "x$timezone" == x ] && exit 0
	echo $timezone > /etc/TZ
	export TZ=$timezone
	tazbox notify "$(_ 'TimeZone was set to $timezone')" $icon 3
	rm -f $tmpcc
}

#
# Manage i18n packages
#

# if installed
if_installed() {
	[ -d /var/lib/tazpkg/installed/$1 ]
}

# get package's description, install flag and sizes
desc_etc()
{
	INFO="$(grep -m1 -A3 -x -F $1 /var/lib/tazpkg/packages.txt)"
	DESC=$(echo "$INFO" | sed -n 3p)
	if if_installed $1; then
		INST="TRUE"; echo $1 >> $ORIG_LIST
	else
		INST="FALSE"
	fi
	SIZES=$(echo "$INFO" | sed -n 4p)
	SIZE1=${SIZES%% *}
	SIZE2=$(echo $SIZES | cut -d' ' -f2 | tr -d '(')
	echo -e "$INST\n$1\n$DESC\n${SIZE1//.0}\n${SIZE2//.0}" >> $PKGS_LIST
}

# remove temp
rm_temp() {
	rm -f $PKGS_LIST $ORIG_LIST $ANSWER $NEW_LIST $LIST1 $LIST2
}

# install/remove locale packages
manage_i18n() {
	tazbox notify "$(_ 'Please wait')" appointment-soon &

	PKGS_LIST=$(mktemp)
	ORIG_LIST=$(mktemp)
	ANSWER=$(mktemp)
	NEW_LIST=$(mktemp)
	LIST1=$(mktemp)
	LIST2=$(mktemp)
	PLIST=/var/lib/tazpkg/packages.list

	for i in $(grep -E '^locale' $PLIST | grep -v 'extra' | \
		sed 's|\(locale-[a-zA-Z_]*\).*|\1|'); do
		desc_etc $i
	done

	if [ "x$1" != xmain ]; then
		for i in $(grep -E '^locale' $PLIST | grep 'extra' | \
			sed 's|\(locale-[a-zA-Z_]*-extra\).*|\1|'); do
			desc_etc $i
		done
		if if_installed libQtCore; then
			for i in $(grep -E '^qt-locale' $PLIST | \
				sed 's|\(qt-locale-[a-zA-Z_]*\).*|\1|'); do
				desc_etc $i
			done
		fi
		if if_installed razorqt; then
			for i in $(grep -E '^razorqt-locale' $PLIST | \
				sed 's|\(razorqt-locale-[a-zA-Z_]*\).*|\1|'); do
				desc_etc $i
			done
		fi
		if if_installed firefox; then
			for i in $(grep -E '^firefox-langpack' $PLIST | \
				sed 's|\(firefox-langpack-[a-zA-Z_]*\).*|\1|'); do
				desc_etc $i
			done
		fi
		if if_installed thunderbird; then
			for i in $(grep -E '^thunderbird-langpack' $PLIST | \
				sed 's|\(thunderbird-langpack-[a-zA-Z_]*\).*|\1|'); do
				desc_etc $i
			done
		fi
		if if_installed squirrelmail; then
			for i in $(grep -E '^squirrelmail' $PLIST | \
				grep -E '^squirrelmail-[a-z][a-z][_-]' | \
				sed 's|\(squirrelmail-[a-zA-Z_]*\)-.*|\1|'); do
				desc_etc $i
			done
		fi
		if if_installed aspell; then
			for i in $(grep -E '^aspell' $PLIST | \
				grep -E 'aspell-[a-z][a-z][^a-z]' | \
				sed 's|\(aspell-[a-zA-Z_]*\)-.*|\1|'); do
				desc_etc $i
			done
		fi
		OTHER_LOCALE="gnome-commander|-i18n gnome-vfs|-i18n gpa|-langpack \
		gucharmap|-i18n lxterminal|-locales lyx|-locales rox-filer|-locales \
		ufraw|-locales qupzilla|-locales"
		for i in $OTHER_LOCALE; do
			if if_installed ${i%%|*}; then desc_etc ${i/|/}; fi
		done
	fi

	icon=stock_properties
	cat $PKGS_LIST | \
	{
		yad --title="$(_n 'Manage locale packages')" --window-icon=$icon \
		--width=600 --height=400 --on-top --center \
		--image=$icon --image-on-top \
		--text="$(_n 'Check only locale packages you need and press "Install/Remove".')" \
		--list --multiple --ellipsize=END --expand-column=3 \
		--column="$(_n 'Inst.'):CHK" --column="$(_n 'Package Name'):TEXT" \
		--column="$(_n 'Description'):TEXT" --column="$(_n 'Size'):TEXT" \
		--column="$(_n 'Installed'):TEXT" \
		--button="$(_n 'Recharge list')!reload:tazbox recharge" \
		--button="$(_n 'Install/Remove')!system-upgrade:2" \
		--button="gtk-cancel:1" \
		--print-all
	} > $ANSWER

	if [ "x$?" == "x1" ]; then rm_temp; exit 0; fi

	grep -e 'TRUE' $ANSWER | cut -d'|' -f2 > $NEW_LIST

	# check difference between ORIG_LIST and NEW_LIST
	sort -o $LIST1 $ORIG_LIST
	sort -o $LIST2 $NEW_LIST
	DIFF=$(diff $LIST1 $LIST2 | sed '/---/d;/+++/d;/@@/d')
	if [ "x$DIFF" == "x" ]; then rm_temp; exit 0; fi

	# output log to gtk window
	title="$(_n 'TazPkg log')"; icon="tazpkg"; opts="--tail"
	{
		for pkg in $(echo "$DIFF" | grep -e '^-' | sed 's|^-||g'); do
			_ 'REMOVE: $pkg'
			yes | tazpkg -r $pkg --output="raw"
		done
		for pkg in $(echo "$DIFF" | grep -e '^+' | sed 's|^+||g'); do
			_ 'INSTALL: $pkg'
			tazpkg -gi $pkg --output="raw"
		done
		echo -e "\n\n$(_n 'Done!')\n"
	} | output_command
	rm_temp
}



# New file functions
newfile_main() {
	icon=gtk-new
	yad --title="$(_n 'New file')" --window-icon=$icon \
		--width=460 --height=160 --on-top --center \
		--image=$icon --image-on-top \
		--text="<b>$(_n 'Create a new file or folder on your desktop')</b>" \
		--entry --entry-label="$(_n 'File name')" \
		--ricon=editclear \
		--always-print-result \
		--button="$(_n 'SHell script')!application-x-shellscript:4" \
		--button="$(_n 'Folder')!stock_folder:3" \
		--icon="gtk-new" \
		--button="$(_n 'File')!application-text:2" \
		--button="gtk-cancel:1"
}

newfile() {
	file=$(newfile_main)
	ret=$?
	[ "$file" ] || exit 0
	case $ret in
		4)
			cat > $HOME/Desktop/$file << EOT
#!/bin/sh
#

EOT
			chmod +x $HOME/Desktop/$file ;;
		3) mkdir -p $HOME/Desktop/$file ;;
		2) touch $HOME/Desktop/$file ;;
		1) exit 0 ;;
	esac
}

# All applications
all_apps() {
	icon=stock_bookmark
	yad --title="$(_n 'All Applications')" --window-icon=$icon \
		--width=400 --height=400 \
		--icons --compact \
		--read-dir=/usr/share/applications \
		--button="gtk-close:0"
}

# Ask root permissions for system settings
ask_root() {
	if [ $(id -u) != 0 ]; then
		exec tazbox su $0 $@
		exit 0
	fi
}

#
# Commands
#
case "$1" in
	su)
		# Don't show dialog if we are root
		test $(id -u) = 0 && exec ${@:2}
		SU_CMD="${@:2}"
		# Check if a password has been saved before launching main dialog
		if [ -s $HOME/.config/slitaz/subox.conf ]; then
			PASSWD=$(cat $HOME/.config/slitaz/subox.conf)
			CHECKED="TRUE"
		fi
		# Display the main dialog (ask for password)
		main=$(su_main $SU_CMD)
		# Deal with --button values and exit if cancelled to avoid erasing
		# saved password.
		[ $? == 1 ] && exit 0
		# Save or erase Autosaved password
		if [ $(echo $main | cut -f2 -d"|") == "TRUE" ]; then
			echo $main | cut -f 1 -d "|" > $HOME/.config/slitaz/subox.conf
			chmod 0600 $HOME/.config/slitaz/subox.conf
		else
			cat /dev/null > $HOME/.config/slitaz/subox.conf
		fi
		# Try to login & execute. If password is wrong execute error dialog
		SU_CMD_QUOTED="$(echo "dbus-launch $SU_CMD" --exit-with-session | sed 's|&|\\&|g')"
		echo $main | cut -f 1 -d "|" | su -c "$SU_CMD_QUOTED &" || su_error ;;
	logout)
		# Logout window with actions
		if [ "$oldstyle" ]; then
			answer=$(logout_oldstyle)
		else
			logout_main; answer=$?
		fi
		# Deal with --button values
		# DE and WM started with a custom -session script should export
		# XDG_CURRENT_DESKTOP
		case $answer in
			4|*exit)
				case $XDG_CURRENT_DESKTOP in
					LXDE)
						[ "$_LXSESSION_PID" ] && kill $_LXSESSION_PID
						[ "$DESKTOP_SESSION" == "compiz" ] && killall compiz
						openbox --exit ;;
					openbox) openbox --exit ;;
					compiz) killall compiz ;;
					*)
						# Try to kill other WM that dont set XDG var.
						jwm -exit 2>/dev/null ;;
				esac ;;
			3|*reboot)
				reboot || reboot -f ;;
			2|*halt)
				poweroff ;;
		esac ;;
	out)
		# Pipe a command into a GTK window
		sed 's|\[.m||g; s|\[[0-9][0-9]*G|	|g' | output_command ;;
	out-dl)
		# A tiny GTK window for Busybox wget output
		url=$2; opts="--tail --button=gtk-cancel:1"
		icon=folder-downloads; title="$(_ 'Downloading...')"
		[ -d $DOWNLOADS ] || mkdir -p $DOWNLOADS
		busybox wget -c -P $DOWNLOADS $url 2>&1 | output_command
		cancel_dl ;;
	locale)
		ask_root $@ && locale ;;
	keymap)
		ask_root $@ && keymap ;;
	tz)
		ask_root $@ && tz ;;
	manage_i18n)
		ask_root $@ && manage_i18n $2 ;;
	recharge)
		ask_root $@; opts="--on-top"; tazpkg recharge | output_command ;;
	setup)
		ask_root $@ && setup ;;
	new-file)
		newfile ;;
	all-apps)
		all_apps ;;
	notify|-n)
		# On screen notification box.
		icon="$3"
		time="$4"
		[ "$icon" ] || icon=info
		[ "$time" ] || time=4
		yad --width=520 --height=80 --timeout=$time --timeout-indicator=right \
			--on-top --center --no-buttons --borders=12 --undecorated \
			--skip-taskbar --image=$icon --image-on-top --text="<b>$2</b>" ;;
	tazapps)
		# Default applications configuration script. System wide config file
		# is /etc/slitaz/applications.conf and each user can have personal
		# settings. System wide for root and personal config for user.
		export CONFIG="$HOME/.config/slitaz/applications.conf"
		if [ "$(id -u)" = 0 ]; then
			[ ! -f $CONFIG ] || mv -f $CONFIG /etc/slitaz/applications.conf
			export CONFIG="/etc/slitaz/applications.conf"
		fi

		for a in FILE_MANAGERS BROWSERS EDITORS TERMINALS WINDOW_MANAGERS;
		do
			eval $(expr $a=$(echo $(/usr/bin/tazx get-applist ${a%%S} \
			only-installed yad) | sed 's/ /!/g ; s/!!//g; s/ //g'))
		done

		# Missing file was created by slitaz_apps_conf function from tazx
		. $CONFIG

		icon=preferences-desktop-default-applications
		eval $(yad --title="$(_n 'SliTaz default applications')" \
			--window-icon=$icon --image=$icon --image-on-top \
			--text="<b>$(_n 'SliTaz default applications configuration')</b>" \
			--form \
			--field="$(_n 'File manager:'):CBE" "$FILE_MANAGERS" \
			--field="$(_n 'Web browser:'):CBE" "$BROWSERS" \
			--field="$(_n 'Text editor:'):CBE" "$EDITORS" \
			--field="$(_n 'Terminal:'):CBE" "$TERMINALS" \
			--field="$(_n 'Window manager:'):CBE" "$WINDOW_MANAGERS" | \
			awk -F'|' '{printf "FILE_MANAGER=\"%s\"\nBROWSER=\"%s\"\nEDITOR=\"%s\"\
TERMINAL=\"%s\"\nWINDOW_MANAGER=\"%s\"\n", $1, $2, $3, $4, $5}')

		sed '/FILE_MANAGER=/s|"\([^"]*\)"|"'$FILE_MANAGER'"|; \
			/BROWSER=/s|"\([^"]*\)"|"'$BROWSER'"|; \
			/EDITOR=/s|"\([^"]*\)"|"'$EDITOR'"|; \
			/TERMINAL=/s|"\([^"]*\)"|"'$TERMINAL'"|; \
			/WINDOW_MANAGER=/s|"\([^"]*\)"|"'$WINDOW_MANAGER'"|' \
			-i $CONFIG ;;
	gpl)
		yad --title="GNU General Public License" --window-icon=text-x-generic \
			--geometry="650x500" \
			--image=/usr/share/pixmaps/gpl3.png --image-on-top \
			--center \
			--text-info \
			--fontname=monospace \
			--button "OK" < /usr/share/licenses/gpl.txt ;;
	*)
		usage ;;
esac

exit 0
